// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// wv_value
double wv_value(double x, List wv, int filter_number);
RcppExport SEXP _DaubechiesSim_wv_value(SEXP xSEXP, SEXP wvSEXP, SEXP filter_numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_value(x, wv, filter_number));
    return rcpp_result_gen;
END_RCPP
}
// wv_values
NumericVector wv_values(NumericVector X, List wv, int filter_number);
RcppExport SEXP _DaubechiesSim_wv_values(SEXP XSEXP, SEXP wvSEXP, SEXP filter_numberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_values(X, wv, filter_number));
    return rcpp_result_gen;
END_RCPP
}
// wvs_dilation_shift
NumericVector wvs_dilation_shift(NumericVector X, List wv, int filter_number, int j, int k);
RcppExport SEXP _DaubechiesSim_wvs_dilation_shift(SEXP XSEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(wvs_dilation_shift(X, wv, filter_number, j, k));
    return rcpp_result_gen;
END_RCPP
}
// wv_dilation_shift
double wv_dilation_shift(double x, List wv, int filter_number, int j, int k);
RcppExport SEXP _DaubechiesSim_wv_dilation_shift(SEXP xSEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_dilation_shift(x, wv, filter_number, j, k));
    return rcpp_result_gen;
END_RCPP
}
// wv_trans_fast
NumericVector wv_trans_fast(NumericVector X, List wv, int filter_number, double R, NumericVector gammas, double beta);
RcppExport SEXP _DaubechiesSim_wv_trans_fast(SEXP XSEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP RSEXP, SEXP gammasSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gammas(gammasSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_trans_fast(X, wv, filter_number, R, gammas, beta));
    return rcpp_result_gen;
END_RCPP
}
// wv_trans
NumericVector wv_trans(NumericVector X, List wv, int filter_number, double R, NumericVector gammas, double beta);
RcppExport SEXP _DaubechiesSim_wv_trans(SEXP XSEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP RSEXP, SEXP gammasSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gammas(gammasSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_trans(X, wv, filter_number, R, gammas, beta));
    return rcpp_result_gen;
END_RCPP
}
// wv_analysis
NumericMatrix wv_analysis(NumericVector X, List wv, int filter_number, int level, NumericVector ks);
RcppExport SEXP _DaubechiesSim_wv_analysis(SEXP XSEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP levelSEXP, SEXP ksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    rcpp_result_gen = Rcpp::wrap(wv_analysis(X, wv, filter_number, level, ks));
    return rcpp_result_gen;
END_RCPP
}
// outer_prod
arma::mat outer_prod(NumericVector X, arma::vec X_space_g_density, List wv, int filter_number, int level, NumericVector ks, int res, double norm_const);
RcppExport SEXP _DaubechiesSim_outer_prod(SEXP XSEXP, SEXP X_space_g_densitySEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP levelSEXP, SEXP ksSEXP, SEXP resSEXP, SEXP norm_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_space_g_density(X_space_g_densitySEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< int >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type norm_const(norm_constSEXP);
    rcpp_result_gen = Rcpp::wrap(outer_prod(X, X_space_g_density, wv, filter_number, level, ks, res, norm_const));
    return rcpp_result_gen;
END_RCPP
}
// generate_cov
arma::mat generate_cov(NumericVector X, arma::vec X_space_g_density, List wv, int filter_number, int level, NumericVector ks, int res, double norm_const);
RcppExport SEXP _DaubechiesSim_generate_cov(SEXP XSEXP, SEXP X_space_g_densitySEXP, SEXP wvSEXP, SEXP filter_numberSEXP, SEXP levelSEXP, SEXP ksSEXP, SEXP resSEXP, SEXP norm_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_space_g_density(X_space_g_densitySEXP);
    Rcpp::traits::input_parameter< List >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type filter_number(filter_numberSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< int >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type norm_const(norm_constSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_cov(X, X_space_g_density, wv, filter_number, level, ks, res, norm_const));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _DaubechiesSim_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _DaubechiesSim_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _DaubechiesSim_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _DaubechiesSim_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DaubechiesSim_wv_value", (DL_FUNC) &_DaubechiesSim_wv_value, 3},
    {"_DaubechiesSim_wv_values", (DL_FUNC) &_DaubechiesSim_wv_values, 3},
    {"_DaubechiesSim_wvs_dilation_shift", (DL_FUNC) &_DaubechiesSim_wvs_dilation_shift, 5},
    {"_DaubechiesSim_wv_dilation_shift", (DL_FUNC) &_DaubechiesSim_wv_dilation_shift, 5},
    {"_DaubechiesSim_wv_trans_fast", (DL_FUNC) &_DaubechiesSim_wv_trans_fast, 6},
    {"_DaubechiesSim_wv_trans", (DL_FUNC) &_DaubechiesSim_wv_trans, 6},
    {"_DaubechiesSim_wv_analysis", (DL_FUNC) &_DaubechiesSim_wv_analysis, 5},
    {"_DaubechiesSim_outer_prod", (DL_FUNC) &_DaubechiesSim_outer_prod, 8},
    {"_DaubechiesSim_generate_cov", (DL_FUNC) &_DaubechiesSim_generate_cov, 8},
    {"_DaubechiesSim_rcpparma_hello_world", (DL_FUNC) &_DaubechiesSim_rcpparma_hello_world, 0},
    {"_DaubechiesSim_rcpparma_outerproduct", (DL_FUNC) &_DaubechiesSim_rcpparma_outerproduct, 1},
    {"_DaubechiesSim_rcpparma_innerproduct", (DL_FUNC) &_DaubechiesSim_rcpparma_innerproduct, 1},
    {"_DaubechiesSim_rcpparma_bothproducts", (DL_FUNC) &_DaubechiesSim_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DaubechiesSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
